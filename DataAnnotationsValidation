namespace Tests
{
public class User
    {

        public string Username{ get; set; }

        [Required]
        [StringLength(18, ErrorMessage = "The {0} must be at least {2} characters long and maximum of {1}.", MinimumLength = 6)]
        [RegularExpression(@"^((?=.*[a-z])(?=.*[A-Z])(?=.*\d)).+$", ErrorMessage = "The {0} must have at least one number.")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password{ get; set; }
    }
    
    public class Tests
    {
        [SetUp]
        public void Setup()
        {
            var user = new User();
        }

        [Test]
        public void When_No_Password_Should_Throw_Required_Validation_Error()
        {
            var user = new User();
            var validationResult = new List<ValidationResult>();
            var actual = Validator.TryValidateObject(user, new ValidationContext(user), validationResult, true);
            Assert.IsFalse(actual);
            Assert.AreEqual(Constants.PasswordRequired, validationResult[0].ErrorMessage);
        }

        [Test]
        public void When_No_Password_Should_Be_Atleast_six_Letters ()
        {
            var user = new User {Password = "Kan2"};
            var validationResult = new List<ValidationResult>();
            var actual = Validator.TryValidateObject(user, new ValidationContext(user), validationResult, true);
            Assert.IsFalse(actual);
            Assert.AreEqual(Constants.PasswordMinimumSixLetters, validationResult[0].ErrorMessage);
        }

        [Test]
        public void When_No_Password_Should_CannotExceed_Atleast_18_Letters()
        {
            var user = new User { Password = "Kan2Kan2Kan2Kan2Kan2Kan2Kan2Kan2Kan2Kan2" };
            var validationResult = new List<ValidationResult>();
            var actual = Validator.TryValidateObject(user, new ValidationContext(user), validationResult, true);
            Assert.IsFalse(actual);
            Assert.AreEqual(Constants.PasswordMinimumSixLetters, validationResult[0].ErrorMessage);
        }

        [Test]
        public void When_The_Password_Doe_Not_Have_Numeric_Throw_Error_Message()
        {
            var user = new User { Password = "Kannan" };
            var validationResult = new List<ValidationResult>();
            var actual = Validator.TryValidateObject(user, new ValidationContext(user), validationResult, true);
            Assert.IsFalse(actual);
            Assert.AreEqual(Constants.PasswordShouldHaveAtleasetOneNumber, validationResult[0].ErrorMessage);
        }
        [Test]
        public void When_The_Password_Does_Not_Have_UpperCase_Throw_Error_Message()
        {
            var user = new User { Password = "kannan1" };
            var validationResult = new List<ValidationResult>();
            var actual = Validator.TryValidateObject(user, new ValidationContext(user), validationResult, true);
            Assert.IsFalse(actual);
            Assert.AreEqual(Constants.PasswordShouldHaveAtleasetOneNumber, validationResult[0].ErrorMessage);
        }
        [Test]
        public void When_The_Password_Is_In_RightFormat_Should_Not_Throw_Error_Message()
        {
            var user = new User { Password = "Kannan1" };
            var validationResult = new List<ValidationResult>();
            var actual = Validator.TryValidateObject(user, new ValidationContext(user), validationResult, true);
            Assert.IsTrue(actual);
            Assert.AreEqual(0,validationResult.Count);
        }
    }

    public static class Constants
    {
        public  const string PasswordRequired = "The Password field is required.";
        public const string PasswordMinimumSixLetters = "The Password must be at least 6 characters long and maximum of 18.";
        public const string PasswordShouldHaveAtleasetOneNumber = "The Password must have at least one number.";
    }
    public class PasswordValidationTest
    {

        [Test]
        public void Empty_Password_Should_Throw_Exception()
        {
            var passwordValidation = new PasswordValidation();
            var password = string.Empty;
            var message = string.Empty;
            var exception = Assert.Throws<ArgumentNullException>(() => passwordValidation.ValidatePassword(password,out message));
            Assert.That(exception.GetType().ToString(),Is.EqualTo("System.ArgumentNullException"));
            Assert.That(exception.Message, Is.EqualTo("Password cannot be empty\r\nParameter name: password"));

        }

        [Test]
        public void Password_Shouldbe_Atleast_6_Letters()
        {
            var passwordValidation = new PasswordValidation();
            var password = "knnan";
            var message = "";
            var result = passwordValidation.ValidatePassword(password,out message);
            Assert.IsFalse(result);
            Assert.AreEqual(Constants.PasswordMinimumSixLetters,message);
        }

        [Test]
        public void Password_Should_Not_Exceed_18_Letters()
        {
            var passwordValidation = new PasswordValidation();
            var password = "kannankannankannankannankannan";
            var message = "";
            var result = passwordValidation.ValidatePassword(password, out message);
            Assert.IsFalse(result);
            Assert.AreEqual(Constants.PasswordMinimumSixLetters, message);
        }
        [Test]
        public void Password_Should_Have_Atleaset_One_Upper()
        {
            var passwordValidation = new PasswordValidation();
            var password = "kannan";
            var message = "";
            var result = passwordValidation.ValidatePassword(password, out message);
            Assert.IsFalse(result);
            Assert.AreEqual(Constants.PasswordShouldHaveNumericAndUpperCase, message);
        }
        [Test]
        public void Password_Should_Have_Atleaset_One_Numeric()
        {
            var passwordValidation = new PasswordValidation();
            var password = "Kannan";
            var message = "";
            var result = passwordValidation.ValidatePassword(password, out message);
            Assert.IsFalse(result);
            Assert.AreEqual(Constants.PasswordShouldHaveNumericAndUpperCase, message);
        }
        [Test]
        public void Right_Password_Should_Validated_Successfully()
        {
            var passwordValidation = new PasswordValidation();
            var password = "Kannan1";
            var message = "";
            var result = passwordValidation.ValidatePassword(password, out message);
            Assert.IsTrue(result);
             
        }

    }
}
